import SwiftUI
import FirebaseCore
import FirebaseAuth
import GoogleSignIn
import UIKit
import AuthenticationServices
import Network
import FirebaseFirestore

class AppDelegate: NSObject, UIApplicationDelegate {
    private var networkMonitor = NWPathMonitor()
    private let networkQueue = DispatchQueue(label: "NetworkMonitor")
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {
        // Configure Firebase
        FirebaseApp.configure()
        
        // Enable Firestore offline persistence
        let db = Firestore.firestore()
        let settings = db.settings
        settings.cacheSettings = PersistentCacheSettings(sizeBytes: NSNumber(value: FirestoreCacheSizeUnlimited))
        db.settings = settings
        
        // Set up network connectivity monitoring
        startNetworkMonitoring()
        
        // Fix for navigation layout constraints
        setupNavigationBarAppearance()
        
        // Apply fixes for keyboard and layout constraint issues
        fixLayoutConstraints()
        
        return true
    }
    
    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {
        return GIDSignIn.sharedInstance.handle(url)
    }
    
    func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -> UISceneConfiguration {
        let sceneConfig = UISceneConfiguration(name: nil, sessionRole: connectingSceneSession.role)
        sceneConfig.delegateClass = SceneDelegate.self
        return sceneConfig
    }
    
    private func startNetworkMonitoring() {
        networkMonitor.pathUpdateHandler = { path in
            let isConnected = path.status == .satisfied
            print("Network connectivity changed: \(isConnected ? "Connected" : "Disconnected")")
            
            // Perform actions based on network state if needed
            if isConnected {
                // Reconnect services if needed
            }
        }
        
        networkMonitor.start(queue: networkQueue)
    }
    
    deinit {
        networkMonitor.cancel()
    }
    
    private func setupNavigationBarAppearance() {
        // Fix for layout constraints in NavigationViews
        let appearance = UINavigationBarAppearance()
        appearance.configureWithDefaultBackground()
        UINavigationBar.appearance().standardAppearance = appearance
        UINavigationBar.appearance().scrollEdgeAppearance = appearance
        UINavigationBar.appearance().compactAppearance = appearance
        
        // Fix for SystemInputAssistantView constraint conflicts
        // By setting the appearance directly, we prevent some layout conflicts
        let toolbarAppearance = UIToolbarAppearance()
        toolbarAppearance.configureWithDefaultBackground()
        UIToolbar.appearance().standardAppearance = toolbarAppearance
        UIToolbar.appearance().compactAppearance = toolbarAppearance
        UIToolbar.appearance().scrollEdgeAppearance = toolbarAppearance
        
        // Ensure keyboard dismisses when tapping outside of text fields at UIKit level
        UIScrollView.appearance().keyboardDismissMode = .interactive
        
        // Fix for SFAuthenticationViewController constraint issues
        // These settings help prevent constraint conflicts during auth controller presentation
        if #available(iOS 15.0, *) {
            let navigationCenter = UIMutableApplicationShortcutItem(type: "navigation-center-fix", localizedTitle: "")
            UIApplication.shared.shortcutItems = [navigationCenter]
        }
        
        // Additional fix for web authentication sessions - using static property instead
        UserDefaults.standard.set(true, forKey: "ASWebAuthenticationSessionPrefersEphemeralWebBrowserSession")
    }
    
    private func fixLayoutConstraints() {
        // Fix for constraint issues with SystemInputAssistantView
        // Make sure all UIKit appearance configurations happen on main thread
        DispatchQueue.main.async {
            UITextField.appearance().returnKeyType = .done
        }
        
        // Fix for keyboard issues - use notification center to dismiss keyboard when tapping outside
        NotificationCenter.default.addObserver(
            forName: UIResponder.keyboardWillShowNotification,
            object: nil,
            queue: .main
        ) { notification in
            // Force layout to update when keyboard appears
            DispatchQueue.main.async {
                UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
                UIApplication.shared.sendAction(#selector(UIResponder.becomeFirstResponder), to: nil, from: nil, for: nil)
            }
        }
        
        // Add similar workaround for Firebase auth password field
        if let bundle = Bundle(identifier: "org.cocoapods.FirebaseAuth") {
            bundle.load()
        }
    }
}

class SceneDelegate: NSObject, UIWindowSceneDelegate {
    var window: UIWindow?
    
    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options: UIScene.ConnectionOptions) {
        // Use this method to set up the scene
        guard let windowScene = scene as? UIWindowScene else { return }
        
        // Set up the window with the windowScene
        window = UIWindow(windowScene: windowScene)
        
        // Handle connection options if needed
        if let urlContext = options.urlContexts.first {
            GIDSignIn.sharedInstance.handle(urlContext.url)
        }
    }
    
    func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {
        guard let url = URLContexts.first?.url else { return }
        GIDSignIn.sharedInstance.handle(url)
    }
}

// Helper class to manage SystemInputAssistantView constraints
class InputAssistantManager {
    static let shared = InputAssistantManager()
    
    private init() {}
    
    func disableAssistantHeightConstraintInWindow(_ window: UIWindow, assistantViewClass: UIView.Type) {
        // Always execute on main thread
        if !Thread.isMainThread {
            DispatchQueue.main.async { [weak self] in
                self?.disableAssistantHeightConstraintInWindow(window, assistantViewClass: assistantViewClass)
            }
            return
        }
        
        for view in window.subviews.reversed() {
            if type(of: view) == assistantViewClass {
                for constraint in view.constraints {
                    if constraint.identifier == "assistantHeight" {
                        constraint.isActive = false
                        break
                    }
                }
            }
        }
    }
    
    func setupConstraintDisabling(assistantViewClass: UIView.Type) {
        // Ensure we're on the main thread
        if !Thread.isMainThread {
            DispatchQueue.main.async { [weak self] in
                self?.setupConstraintDisabling(assistantViewClass: assistantViewClass)
            }
            return
        }
        
        NotificationCenter.default.addObserver(
            forName: UIWindow.didBecomeKeyNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            guard let self = self else { return }
            
            // Use the connected scenes API to access windows in iOS 15+
            if #available(iOS 15.0, *) {
                for scene in UIApplication.shared.connectedScenes {
                    if let windowScene = scene as? UIWindowScene {
                        for window in windowScene.windows {
                            self.disableAssistantHeightConstraintInWindow(window, assistantViewClass: assistantViewClass)
                        }
                    }
                }
            } else {
                // Fallback for older iOS versions with deprecation warning suppressed
                #if DEBUG
                print("Warning: Using deprecated UIApplication.windows API for iOS < 15")
                #endif
                
                // swiftlint:disable:next deprecated
                for window in UIApplication.shared.windows {
                    self.disableAssistantHeightConstraintInWindow(window, assistantViewClass: assistantViewClass)
                }
            }
        }
    }
}

@main
struct App100Days: App {
    @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate
    @StateObject private var userSession = UserSession.shared
    @StateObject private var subscriptionService = SubscriptionService.shared
    @StateObject private var notificationService = NotificationService.shared
    @AppStorage("AppTheme") private var appTheme: String = "system"
    
    init() {
        // FirebaseApp is now configured in AppDelegate
        
        // Fix for layout constraints in NavigationViews - applying a more robust approach
        let navBarAppearance = UINavigationBarAppearance()
        navBarAppearance.configureWithDefaultBackground()
        navBarAppearance.shadowColor = .clear // Remove shadow line
        
        // Set a clean appearance for navigation bars
        UINavigationBar.appearance().standardAppearance = navBarAppearance
        UINavigationBar.appearance().scrollEdgeAppearance = navBarAppearance
        UINavigationBar.appearance().compactAppearance = navBarAppearance
        
        // Fix SFAuthenticationViewController constraints by ensuring auth session doesn't hold stale references
        // Using UserDefaults instead of the instance property
        UserDefaults.standard.set(true, forKey: "ASWebAuthenticationSessionPrefersEphemeralWebBrowserSession")
        
        // Fix SystemInputAssistantView height constraint issue
        if let assistantViewClass = NSClassFromString("SystemInputAssistantView") as? UIView.Type {
            // Use the InputAssistantManager class to avoid capturing 'self' in closure
            InputAssistantManager.shared.setupConstraintDisabling(assistantViewClass: assistantViewClass)
        }
    }
    
    var body: some Scene {
        WindowGroup {
            AppContentView()
                .environmentObject(userSession)
                .environmentObject(subscriptionService)
                .environmentObject(notificationService)
                .onOpenURL { url in
                    GIDSignIn.sharedInstance.handle(url)
                }
                .preferredColorScheme(getPreferredColorScheme())
        }
    }
    
    private func getPreferredColorScheme() -> ColorScheme? {
        switch appTheme {
        case "light":
            return .light
        case "dark":
            return .dark
        default:
            return nil // System default
        }
    }
}

struct AppContentView: View {
    @EnvironmentObject var userSession: UserSession
    @EnvironmentObject var subscriptionService: SubscriptionService
    @EnvironmentObject var notificationService: NotificationService
    
    var body: some View {
        Group {
            if userSession.isAuthenticated {
                if userSession.hasCompletedOnboarding {
                    MainAppView()
                        .environmentObject(subscriptionService)
                } else {
                    OnboardingView()
                        .environmentObject(subscriptionService)
                }
            } else {
                AuthView()
                    .environmentObject(subscriptionService)
            }
        }
    }
}

